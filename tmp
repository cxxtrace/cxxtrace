[0] 0: [CTOR BEGIN], in fiber_proc_impl, ../vendor/relacy/relacy/context.hpp(457)
[1] 0: [CTOR END], in fiber_proc_impl, ../vendor/relacy/relacy/context.hpp(457)
[2] 0: [BEFORE BEGIN], in fiber_proc_impl, ../vendor/relacy/relacy/context.hpp(457)
[3] 0: <atomic_a> atomic store, value=18446744073709551615, (prev value=0), order=relaxed, in atomic, ../vendor/relacy/relacy/atomic.hpp(594)
[4] 0: <atomic_b> atomic store, value=18446744073709551615, (prev value=0), order=relaxed, in atomic, ../vendor/relacy/relacy/atomic.hpp(594)
[5] 0: <atomic_c> atomic store, value=0, (prev value=0), order=relaxed, in atomic, ../vendor/relacy/relacy/atomic.hpp(594)
[6] 0: [BEFORE END], in fiber_proc_impl, ../vendor/relacy/relacy/context.hpp(457)
[7] 0: <atomic_a> atomic load, value=18446744073709551615, order=relaxed, in try_with_lock, ../lib/include/cxxtrace/detail/fickle_lock.h(22)
[8] 0: <mutex_e> mutex: exclusive lock, in try_with_lock_as_outsider_slow, ../lib/include/cxxtrace/detail/fickle_lock_impl.h(23)
[9] 0: acquire fence, in try_with_lock_as_outsider_slow, ../lib/include/cxxtrace/detail/fickle_lock_impl.h(24)
[10] 0: <atomic_b> atomic store, value=0, (prev value=18446744073709551615), order=release, in try_take_leadership_and_lock, ../lib/include/cxxtrace/detail/fickle_lock_impl.h(48)
[11] 0: <atomic_c> atomic load, value=0, order=acquire, in try_take_leadership_and_lock, ../lib/include/cxxtrace/detail/fickle_lock_impl.h(50)
[12] 0: <atomic_a> atomic store, value=0, (prev value=18446744073709551615), order=relaxed, in try_take_leadership_and_lock, ../lib/include/cxxtrace/detail/fickle_lock_impl.h(67)
[13] 0: <atomic_c> atomic store, value=1, (prev value=0), order=relaxed, in try_take_leadership_and_lock, ../lib/include/cxxtrace/detail/fickle_lock_impl.h(69)
[14] 0: <var_d> load, value=0, in operator(), ../test/test_fickle_lock_concurrency.cpp(90)
[15] 0: <var_d> store, value=1, in operator(), ../test/test_fickle_lock_concurrency.cpp(91)
[16] 0: <atomic_c> atomic store, value=0, (prev value=1), order=release, in try_with_lock_as_outsider_slow, ../lib/include/cxxtrace/detail/fickle_lock_impl.h(36)
[17] 0: release fence, in try_with_lock_as_outsider_slow, ../lib/include/cxxtrace/detail/fickle_lock_impl.h(38)
[18] 0: <mutex_e> mutex: exclusive unlock, in try_with_lock_as_outsider_slow, ../lib/include/cxxtrace/detail/fickle_lock_impl.h(23)
[19] 0: <atomic_a> atomic load, value=0, order=relaxed, in try_with_lock, ../lib/include/cxxtrace/detail/fickle_lock.h(22)

// Possibility: 20 and 21 are reordered
[20] 0: <atomic_c> atomic store, value=1, (prev value=0), order=release, in try_with_lock_as_leader, ../lib/include/cxxtrace/detail/fickle_lock.h(39)
[21] 0: <atomic_b> atomic load, value=0, order=acquire, in try_with_lock_as_leader, ../lib/include/cxxtrace/detail/fickle_lock.h(41)

[22] 0: <var_d> load, value=1, in operator(), ../test/test_fickle_lock_concurrency.cpp(90)
[23] 0: <var_d> store, value=2, in operator(), ../test/test_fickle_lock_concurrency.cpp(91)
[24] 1: <atomic_a> atomic load, value=0, order=relaxed, in try_with_lock, ../lib/include/cxxtrace/detail/fickle_lock.h(22)
[25] 1: <mutex_e> mutex: exclusive lock, in try_with_lock_as_outsider_slow, ../lib/include/cxxtrace/detail/fickle_lock_impl.h(23)
[26] 1: acquire fence, in try_with_lock_as_outsider_slow, ../lib/include/cxxtrace/detail/fickle_lock_impl.h(24)

// Possibility: 27 and 28 are reordered
[27] 1: <atomic_b> atomic store, value=1, (prev value=0), order=release, in try_take_leadership_and_lock, ../lib/include/cxxtrace/detail/fickle_lock_impl.h(48)
[28] 1: <atomic_c> atomic load, value=0 [NOT CURRENT], order=acquire, in try_take_leadership_and_lock, ../lib/include/cxxtrace/detail/fickle_lock_impl.h(50)

[29] 0: <atomic_c> atomic store, value=0, (prev value=1), order=release, in try_with_lock_as_leader, ../lib/include/cxxtrace/detail/fickle_lock.h(46)
[30] 0: [THREAD FINISHED], in fiber_proc_impl, ../vendor/relacy/relacy/context.hpp(457)
[31] 1: <atomic_a> atomic store, value=1, (prev value=0), order=relaxed, in try_take_leadership_and_lock, ../lib/include/cxxtrace/detail/fickle_lock_impl.h(67)
[32] 1: <atomic_c> atomic store, value=1, (prev value=0), order=relaxed, in try_take_leadership_and_lock, ../lib/include/cxxtrace/detail/fickle_lock_impl.h(69)
[33] 1: <var_d> load, value=0, in operator(), ../test/test_fickle_lock_concurrency.cpp(90)
[34] 1: DATA RACE (data race detected), in operator(), ../test/test_fickle_lock_concurrency.cpp(90)
